// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  Profile       Profile?
  Ticket        Ticket?

  isTwoFactorEnabled Boolean           @default(false)
  // twoFactorConfirmation TwoFactorConfirmation?
  // RiddleSubmission   RiddleSubmission[]
  RiddleSubmission   RiddleSubmission?
}

model Profile {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @map("userId") @db.ObjectId
  age       Int?
  firstName String?
  lastName  String?
  phone     String?
  address   String?
  affiliate String?
  reference String?
  interest  String?
  born      DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("userId") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model RiddleSubmission {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  url    String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  @@unique([userId, url])
}

enum TicketStatus {
  PAY
  REVIEW
  APPROVE
  DECLINE
  NONE
}

model Ticket {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  nickname       String?
  haveAttended   Boolean      @default(false)
  linkedin       String?
  instagram      String?
  facebook       String?
  twitter        String?
  jobstreet      String?
  reason         String?
  selfishReason  String?
  selflessReason String?
  goal           String[]
  payment_image  String?
  status         TicketStatus @default(NONE)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  @@unique([userId, id])
}

// model RiddleSubmission {
//   id     String @id @default(auto()) @map("_id") @db.ObjectId
//   userId String @map("userId") @db.ObjectId
//   url    String
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([userId, url])
// }

// model TwoFactorToken {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   email   String
//   token   String   @unique
//   expires DateTime

//   @@unique([email, token])
// }

// model TwoFactorConfirmation {
//   id     String @id @default(auto()) @map("_id") @db.ObjectId
//   userId String @map("userId") @db.ObjectId
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([userId])
// }
